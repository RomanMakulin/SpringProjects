
# Cards user transfer app

Привет! Представляю вашему вниманию проект, состоящий из нескольких микро-сервисов, основная идея которого - это работа с банковскими карточками у пользователей. 
Приложение выполнено на базе **серверной** части (RESTfull) и **клиентской** (с использованием thymeleaf).


### Сервер - UsersCardTransfer (REST). port: 8080:

> Стек технологий: Spring Web, Spring Data JPA, h2 database, Thymeleaf,
> Hibernate, Lombok

И так, у нас есть 2 главные сущности: пользователь и банковская карточка, которая у него есть. При регистрации нового пользователя, мы автоматически создаем и регистрируем в системе свою банковскую карту со своим пин-кодом.

Все операции с данными выполняются с использованием базы данных (репозиторий spring data jpa, hibernate,
h2 database). 
В качестве инструмента разработчика была использована технология AOP (aspects, transactions - для корректной работы переводов).

**Инструкция по работе с данными и запуску приложения:**

**users manage:**
```
- localhost:8080/api (PUT запрос) - в тело запроса прописываем имя пользователя
и пин-код. "name", "pin". Остальные данные задаются автоматически;
- localhost:8080/api (GET запрос) - получение списка всех пользователей в базе данных;
- localhost:8080/api/{id} (DELETE запрос) - удаление пользователя по ID;
- localhost:8080/api/{id} (POST запрос) - обновление пользователя по ID. В тело запроса передаем поля:
"name", "cashMoney", "pin". Обновление наличных денег - функция для удобства в тестировании API;
- localhost:8080/api/{id} (GET запрос) - получение конкретного пользователя по ID;
```

**cars manage:**
```
- localhost:8080/api/recieve (POST запрос) - пополнение карточки пользователю. В тело запроса передается
"idUser", "money", "pin";
- localhost:8080/api/withdraw (POST запрос) - снятие денег с карточки в наличные. В тело запроса передается
"idUser", "money", "pin";
- localhost:8080/api/transfer (POST запрос) - перевод денег с карточки другому пользователю. 
В тело запроса передается "idSender", "idReciver", "moneyRecive" "pin".
```

### UserClient - ClientAPI (WEB). port: 8000:

Клиентская часть реализует отрисовку наших web страниц при помощи шаблонизатора thymeleaf,  которые наполняются данными к ранее подключенному серверу, как к внешнему API.

// на текущий момент web версия в разработке
// протестировать получение данных из внешнего API (сервера) можно через REST get запрос:
- localhost:8000/api (GET запрос) 

